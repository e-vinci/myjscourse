{"version":3,"sources":["webpack://myjscourse/./src/components/reviews/all-reviews.js","webpack://myjscourse/./src/components/reviews/all-reviews-summary.js","webpack://myjscourse/./src/components/reviews/review-management.js","webpack://myjscourse/./src/pages/review-page.js"],"names":["projects","setFilteredContents","myReviewsSummary","expectedReviews","className","length","map","project","index","key","summary","totalLikedReviews","totalExpectedReviews","totalPerformedReviews","icon","faHeart","faComment","useProjectData","projectGroupData","updateProjectGroupData","userData","updateUserData","useReviewData","myReviewSummaryData","updateMyReviewSummaryData","allReviewsData","updateAllReviewsData","isLoaded","useState","undefined","filteredContents","setQuery","useEffect","getData","startingDate","group","user","userName","_id","console","error","Date","reviewStartingDate","toLocaleDateString","weekday","year","month","day","status","isAdmin","isProjectMember","type","aria-label","placeholder","onChange","e","inputText","target","value","filteredData","filter","content","shortId","name","description","toLowerCase","includes","parseInt","withAuthentication"],"mappings":"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","file":"component---src-pages-review-page-js-c8fa0fa13ebfad2b4c75.js","sourcesContent":["import React from \"react\";\r\nimport ReviewCard from \"./review-card\";\r\n\r\nconst AllReviews = ({ projects, setFilteredContents, myReviewsSummary }) => {\r\n  console.log(\"SUMMARY:\", myReviewsSummary);\r\n  if (myReviewsSummary && myReviewsSummary.expectedReviews > 0)\r\n    return (\r\n      <td className=\"index--long-text\">\r\n        Veuillez compléter les revues qui vous ont été attribuées dans le Menu\r\n        \"Revues de projets\", \"Mes revues\". Une fois vos{\" \"}\r\n        {myReviewsSummary.expectedReviews} revues réalisées, votre accès aux\r\n        résultats sera débloqué ; )`\r\n      </td>\r\n    );\r\n\r\n  if (!projects || projects.length <= 0) return null;\r\n\r\n  return (\r\n    <>\r\n      {projects.map((project, index) => (\r\n        <ReviewCard key={index} {...{ project, setFilteredContents }} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllReviews;\r\n","import React from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport ReviewCard from \"./review-card\";\r\nimport he from \"he\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart, faComment } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst AllReviewsSummary = ({ projects }) => {\r\n  if (!projects) return null;\r\n\r\n  console.log(\"ALLREVIEWS:\", projects);\r\n\r\n  let summary;\r\n  if (projects.length > 0) summary = projects[0];\r\n  else\r\n    summary = {\r\n      totalLikedReviews: 0,\r\n      totalExpectedReviews: 0,\r\n      totalPerformedReviews: 0,\r\n    };\r\n\r\n  return (\r\n    <div className=\"card card--dark-summary card--fill-wrapper\">\r\n      <div className=\"card__header\">Résumé des revues de tous les projets</div>\r\n\r\n      <div className=\"card__content card__content--long-titles\">\r\n        <div className=\"card__content__title\">Coups de coeurs donnés</div>\r\n        <div className=\"card__content__description\">\r\n          <FontAwesomeIcon icon={faHeart} />\r\n          <span className=\"text--light\">{summary.totalLikedReviews}</span>\r\n        </div>\r\n\r\n        <div className=\"card__content__title\">Revues attendues</div>\r\n        <div className=\"card__content__description\">\r\n          <FontAwesomeIcon icon={faComment} className=\"card__content--orange\"/>\r\n          <span className=\"text--light\">{summary.totalExpectedReviews}</span>\r\n        </div>\r\n\r\n        <div className=\"card__content__title\">Revues terminées</div>\r\n        <div className=\"card__content__description\">\r\n          <FontAwesomeIcon icon={faComment} />\r\n          <span className=\"text--light\">{summary.totalPerformedReviews}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllReviewsSummary;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Spinner from \"../spinner/spinner\";\r\n\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\nimport { useReviewData } from \"../context/reviews/review-data-context\";\r\nimport AllReviews from \"./all-reviews\";\r\nimport AllReviewsSummary from \"./all-reviews-summary\";\r\nimport MyReviewsSummary from \"./my-reviews-summary\";\r\n\r\nconst ReviewManagement = () => {\r\n  // Get state from the provider\r\n  const { projectGroupData, updateProjectGroupData, userData, updateUserData } =\r\n    useProjectData();\r\n\r\n  const {\r\n    myReviewSummaryData,\r\n    updateMyReviewSummaryData,\r\n    allReviewsData,\r\n    updateAllReviewsData,\r\n    isLoaded,\r\n  } = useReviewData();\r\n\r\n  const [filteredContents, setFilteredContents] = useState(undefined);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    const inputText = e.target.value;\r\n    setQuery(e.target.value);\r\n\r\n    const filteredData = allReviewsData.filter((content) => {\r\n      // destructure data from post frontmatter\r\n      const { shortId, name, description } = content;\r\n      return (\r\n        // standardize data with .toLowerCase()\r\n        // return true if the subject, skills...\r\n        // contains the query string\r\n        name.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        description.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        (inputText.length > 0 && parseInt(inputText) === shortId)\r\n      );\r\n    });\r\n\r\n    if (filteredData && filteredData.length > 0)\r\n      setFilteredContents(filteredData);\r\n    else setFilteredContents(undefined);\r\n  };\r\n\r\n  const onReviewAdd = async () => {\r\n    console.log(\"add and\", projectGroupData._id);\r\n    //await addOneProject();\r\n    //const newListOfProjects = await updateProjectData(projectGroupData._id);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // get data from APIs\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      // Deal with project group data\r\n      const group = await updateProjectGroupData();\r\n      // Deal with user role data {role:..., isAdmin:...}\r\n      const user = await updateUserData();\r\n      // Deal with review data\r\n      const temp = await updateMyReviewSummaryData(user.userName, group._id);\r\n      const summary = await updateAllReviewsData(group._id);\r\n    } catch (error) {\r\n      console.error(\"getData:error\", error);\r\n    }\r\n  };\r\n  let startingDate;\r\n  if (projectGroupData) {\r\n    // get the starting date to a string (parse it as it is seen as a string the date from the API / MongoDB)\r\n    const options = {\r\n      weekday: \"long\",\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n    };\r\n    startingDate = new Date(projectGroupData.reviewStartingDate);\r\n    startingDate = startingDate.toLocaleDateString(\"fr-FR\", options);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!isLoaded && <Spinner />}\r\n      {projectGroupData === undefined ? (\r\n        \"\"\r\n      ) : (\r\n        // deal with review view\r\n\r\n        <div className=\"pl-3 pt-3 pb-3 pr-3\">\r\n          <h3 className=\"\">\r\n            Gestion des revues des groupes de {projectGroupData._id}\r\n          </h3>\r\n          {\r\n            /* ONLY SHOW ALL REVIEWS IF\r\n          project group status is not \"init\" or \"dev\" AND\r\n          (user is admin OR user is a project member within this group) \r\n          AND today is after the project review starting date \r\n          */\r\n            projectGroupData &&\r\n            projectGroupData.status !== \"init\" &&\r\n            projectGroupData.status !== \"dev\" &&\r\n            ((userData && userData.isAdmin) ||\r\n              (myReviewSummaryData && myReviewSummaryData.isProjectMember)) ? (\r\n              <div>\r\n                <div className=\"summary\">\r\n                  <div className=\"summary__card-wrapper\">\r\n                    <AllReviewsSummary\r\n                      projects={allReviewsData}                      \r\n                    />\r\n                  </div>\r\n                  <div className=\"summary__card-wrapper\">\r\n                    <MyReviewsSummary myReviewsSummary={myReviewSummaryData} />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"index\">\r\n                  <input\r\n                    type=\"text\"\r\n                    aria-label=\"Search\"\r\n                    placeholder=\"Filtrez les contenus...\"\r\n                    onChange={handleInputChange}\r\n                    className=\"index__search\"\r\n                  />\r\n\r\n                  <AllReviews\r\n                    projects={\r\n                      filteredContents && filteredContents.length > 0\r\n                        ? filteredContents\r\n                        : allReviewsData\r\n                    }\r\n                    myReviewsSummary={myReviewSummaryData}\r\n                    setFilteredContents={setFilteredContents}\r\n                  ></AllReviews>\r\n                </div>\r\n              </div>\r\n            ) : // deal with reasons not to show the reviews\r\n            // Deal when it is not the season\r\n            !projectGroupData ||\r\n              projectGroupData.status === \"init\" ||\r\n              projectGroupData.status === \"dev\" ? (\r\n              `La saison de revues des projets n'a pas encore été ouverte.\r\n      Nous nous réjouissons de vous revoir tout bientôt pour évaluer les projets de différents groupes.\r\n      Une annonce sera faite une fois la saison ouverte ; )\r\n      Date d'ouverture estimée : ${startingDate}`\r\n            ) : (\r\n              // Deal when it is not the right use\r\n              \"Vous n'avez pas encore le privilège de voir les revues des projets des groupes de \" +\r\n              projectGroupData._id +\r\n              \". Si nécessaire, n'hésitez pas à faire une demande à l'administrateur du site.\"\r\n            )\r\n          }\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ReviewManagement;\r\n","import React from \"react\";\r\nimport MainLayout from \"../components/main-layout\";\r\n\r\nimport { withAuthentication } from \"../components/hoc/hoc\";\r\nimport { ProjectDataProvider } from \"../components/context/projects/project-data-context\";\r\nimport { ReviewDataProvider } from \"../components/context/reviews/review-data-context\";\r\n\r\nimport ReviewManagement from \"../components/reviews/review-management\";\r\n\r\nconst ReviewPage = () => {\r\n  return (\r\n    <ProjectDataProvider>\r\n      <ReviewDataProvider>\r\n        <MainLayout>\r\n          <ReviewManagement />\r\n        </MainLayout>\r\n      </ReviewDataProvider>\r\n    </ProjectDataProvider>\r\n  );\r\n};\r\n\r\nconst ReviewPageProtected = withAuthentication(ReviewPage);\r\nexport default ReviewPageProtected;\r\n"],"sourceRoot":""}