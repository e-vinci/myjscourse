{"version":3,"sources":["webpack://myjscourse/./src/components/content-editable/content-editable.js","webpack://myjscourse/./src/components/projects/project-card.js","webpack://myjscourse/./src/utils/string/string.js","webpack://myjscourse/./src/components/projects/projects-view.js","webpack://myjscourse/./src/components/spinner/spinner.js","webpack://myjscourse/./src/components/projects/project-management.js","webpack://myjscourse/./src/pages/project-page.js"],"names":["currentContent","className","isBeingEdited","onChange","startContent","id","isInline","children","useState","content","handleChange","e","propUpdated","currentTarget","textContent","he","contentEditable","onInput","suppressContentEditableWarning","project","setFilteredContents","setIsBeingEdited","isPublic","setIsPublic","projectUpdateState","setProjectUpdateState","useProjectData","deleteOneProject","updateProjectData","addMemberToProject","deleteMemberFromProject","updateProject","userData","projectGroupData","projectData","onProjectDelete","projectGroupName","undefined","onAddMemberToProject","onDeleteMemberFromProject","onProjectSave","_id","updatedProject","propChanged","previousState","key","shortId","name","isAdmin","icon","faTrashAlt","onClick","projectMembers","includes","userName","status","faEdit","find","faUserPlus","faUserTimes","faSave","faTimes","description","presentationUrl","src","frontendProductionUrl","href","target","frontendRepo","backendRepo","length","map","member","names","email","substring","indexOf","firstname","lastname","charAt","toUpperCase","slice","join","type","checked","disabled","projects","faSpinner","updateProjectGroupData","updateUserData","isLoaded","addOneProject","filteredContents","setQuery","onProjectAdd","useEffect","getData","group","console","error","aria-label","placeholder","inputText","value","filteredData","filter","toLowerCase","parseInt","withAuthentication"],"mappings":"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","file":"component---src-pages-project-page-js-7a0333dbb982553fb3cd.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport he from \"he\";\r\n\r\n/**\r\n * Make a div editable with text (could also be some HTML if needed).\r\n * @param {startContent} String to be used when the content is being updated\r\n * @param {children} React elements to be used when the content is not being updated\r\n * @returns\r\n */\r\n\r\nconst ContentEditable = ({\r\n  className,\r\n  isBeingEdited,\r\n  onChange,\r\n  startContent,\r\n  id,\r\n  isInline,\r\n  children,\r\n}) => {\r\n  const [content, setContent] = useState(startContent);\r\n\r\n  const handleChange = (e) => {\r\n    const propUpdated = {};\r\n    propUpdated[id] = e.currentTarget.textContent;\r\n    // set state at parent level\r\n    onChange(propUpdated);\r\n  };\r\n\r\n  let currentContent;\r\n  if (isBeingEdited) currentContent = content;\r\n  else if (children) currentContent = children;\r\n  else if (content) currentContent = he.decode(content);\r\n\r\n  if (isInline)\r\n    return (\r\n      <span\r\n        className={className ? className : \"\"}\r\n        contentEditable={isBeingEdited ? true : false}\r\n        onInput={handleChange}\r\n        suppressContentEditableWarning={true}\r\n      >\r\n        {currentContent}\r\n      </span>\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={className ? className : \"\"}\r\n      contentEditable={isBeingEdited ? true : false}\r\n      onInput={handleChange}\r\n      suppressContentEditableWarning={true}\r\n    >\r\n      {currentContent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContentEditable;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport he from \"he\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEdit,\r\n  faTrashAlt,\r\n  faUserPlus,\r\n  faUserTimes,\r\n  faSave,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getNamesFromEmail } from \"../../utils/string/string\";\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\nimport ContentEditable from \"../content-editable/content-editable.js\";\r\n\r\nconst ProjectCard = ({ project, setFilteredContents }) => {\r\n  const [isBeingEdited, setIsBeingEdited] = useState(false);\r\n  const [isPublic, setIsPublic] = useState(project.isPublic);\r\n  const [projectUpdateState, setProjectUpdateState] = useState({});\r\n  // Get state management functions from the provider\r\n  const {\r\n    deleteOneProject,\r\n    updateProjectData,\r\n    addMemberToProject,\r\n    deleteMemberFromProject,\r\n    updateProject,\r\n    userData,\r\n    projectGroupData,\r\n    projectData,\r\n  } = useProjectData();\r\n  // Deal with events\r\n  const onProjectDelete = async () => {\r\n    //console.log(\"projectId: endpoint:\", \"DELETE /api/projects/\" + projectId);\r\n    await deleteOneProject(project);\r\n    await updateProjectData(project.projectGroupName);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  const onAddMemberToProject = async () => {\r\n    const updatedProject = await addMemberToProject(project);\r\n    console.log(\"onAddMemberToProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onDeleteMemberFromProject = async () => {\r\n    const updatedProject = await deleteMemberFromProject(project);\r\n    console.log(\"onDeleteMemberFromProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onProjectUpdateRequest = () => {\r\n    setIsBeingEdited(true);\r\n  };\r\n\r\n  const onQuitProjectUpdateRequest = () => {\r\n    setIsBeingEdited(false);\r\n    // clear the update state\r\n    setProjectUpdateState({});\r\n  };\r\n\r\n  const onProjectSave = async () => {\r\n    // save the updated state via the API\r\n    if (projectUpdateState) {\r\n      const updatedProject = await updateProject(\r\n        projectUpdateState,\r\n        project._id\r\n      );\r\n      // clear the project update state\r\n      setProjectUpdateState({});\r\n      setIsBeingEdited(false);\r\n      // re-render all projects\r\n      if (updatedProject) {\r\n        await updateProjectData(project.projectGroupName);\r\n        setFilteredContents(undefined);\r\n      }\r\n    }\r\n  };\r\n\r\n  // deal with modification of content\r\n  const handleChange = (propChanged) => {\r\n    // update the projectState\r\n    setProjectUpdateState((previousState) => {\r\n      return { ...previousState, ...propChanged };\r\n    });\r\n  };\r\n\r\n  const onSetPublic = (e) => {\r\n    setIsPublic(!isPublic);\r\n    setProjectUpdateState({\r\n      ...projectUpdateState,\r\n      ...{ isPublic: !isPublic },\r\n    });\r\n  };\r\n\r\n  console.log(\"projStateUpdated:\", projectUpdateState);\r\n\r\n  if (!project) return null;\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"index__card\" + (isBeingEdited ? \" index__card--is-being-edited\" : \"\")\r\n      }\r\n      key={project.shortId}\r\n      id={project.shortId}\r\n    >\r\n      <div className=\"index__card__header\">\r\n        <span>{\"Projet N° \" + project.shortId + \" : \"}</span>\r\n        <ContentEditable\r\n          isBeingEdited={isBeingEdited}\r\n          id=\"name\"\r\n          onChange={handleChange}\r\n          startContent={project.name}\r\n          isInline\r\n        />\r\n      </div>\r\n\r\n      <div className=\"index__card__description\">\r\n        {\r\n          /* DELETE icon only if user isAdmin (admin or manager) */\r\n          userData.isAdmin && (\r\n            <FontAwesomeIcon icon={faTrashAlt} onClick={onProjectDelete} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /* UPDATE PROJECT : visible only if \r\n          (user is Admin (admin or manager) OR\r\n          user is a member of this project AND \r\n          project group status is not \"end\" ) AND\r\n          project is not being edited\r\n          */\r\n          (userData.isAdmin ||\r\n            (project.projectMembers.includes(userData.userName) &&\r\n              projectGroupData.status !== \"end\")) &&\r\n          !isBeingEdited ? (\r\n            <FontAwesomeIcon icon={faEdit} onClick={onProjectUpdateRequest} />\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n\r\n        {\r\n          /* ADD MEMBER TO PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName has not already joined a project */\r\n          projectGroupData.status === \"init\" &&\r\n            !projectData.find((project) =>\r\n              project.projectMembers.includes(userData.userName)\r\n            ) && (\r\n              <FontAwesomeIcon\r\n                icon={faUserPlus}\r\n                onClick={onAddMemberToProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*REMOVE MEMBER FROM PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName is already a member of this project\r\n        */\r\n          projectGroupData.status === \"init\" &&\r\n            project.projectMembers.includes(userData.userName) && (\r\n              <FontAwesomeIcon\r\n                icon={faUserTimes}\r\n                onClick={onDeleteMemberFromProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*SAVE PROJECT : Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon icon={faSave} onClick={onProjectSave} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /*QUIT PROJECT UPDATE: Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon\r\n              icon={faTimes}\r\n              onClick={onQuitProjectUpdateRequest}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.description !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Description</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"description\"\r\n              startContent={project.description}\r\n              onChange={handleChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.presentationUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">\r\n              Vidéo de présentation\r\n            </div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"presentationUrl\"\r\n              startContent={project.presentationUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <YoutubeImage src={project.presentationUrl} />\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendProductionUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">URL du site</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendProductionUrl\"\r\n              startContent={project.frontendProductionUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendProductionUrl} target=\"_blank\">\r\n                {project.frontendProductionUrl}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo frontend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendRepo\"\r\n              startContent={project.frontendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendRepo} target=\"_blank\">\r\n                {project.frontendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.backendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo backend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"backendRepo\"\r\n              startContent={project.backendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.backendRepo} target=\"_blank\">\r\n                {project.backendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deal with project members */}\r\n      <div className=\"index__card__content\">\r\n        {project.projectMembers !== undefined &&\r\n        project.projectMembers.length > 0 ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Membres du projet</div>\r\n            <div className=\"index__card__content__description\">\r\n              {project.projectMembers\r\n                .map((member) => getNamesFromEmail(member))\r\n                .join(\", \")}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.isPublic !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Public ?</div>\r\n            <div className=\"index__card__content__description\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={isPublic}\r\n                disabled={isBeingEdited ? false : true}\r\n                onClick={onSetPublic}\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","const getNamesFromEmail = (email) => {\r\n  let names = email.substring(0, email.indexOf(\"@\"));\r\n  let firstname = names.substring(0, names.indexOf(\".\"));\r\n  let lastname = names.substring(names.indexOf(\".\") + 1);\r\n  firstname = firstname.charAt(0).toUpperCase() + firstname.slice(1);\r\n  lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  // deal with cases where Extra info is added to the name, when there is a second dot\r\n  if (lastname.indexOf(\".\") >= 0) {\r\n    lastname = lastname.substring(lastname.indexOf(\".\") + 1);\r\n    lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  }\r\n  return firstname + \" \" + lastname;\r\n};\r\n\r\nexport { getNamesFromEmail };\r\n","import React from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport ProjectCard from \"./project-card.js\";\r\nimport he from \"he\";\r\n\r\nconst ProjectsView = ({ projects , setFilteredContents}) => {\r\n  console.log(\"PROJECTSVIEW\", projects);\r\n  if (!projects || projects.length <= 0) return null;\r\n\r\n  return (\r\n    <>\r\n      {projects.map((project) => (\r\n        <ProjectCard {...{ project, setFilteredContents }} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectsView;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { fas, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"spinner__overlay\"></div>\r\n      <div className=\"spinner__animation\">\r\n        <FontAwesomeIcon icon={faSpinner} className=\"fa-3x fa-spin\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ProjectsView from \"./projects-view\";\r\nimport Spinner from \"../spinner/spinner\";\r\n\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\n\r\nconst ProjectManagement = () => {\r\n  // Get state from the provider\r\n  const {\r\n    projectGroupData,\r\n    updateProjectGroupData,\r\n    userData,\r\n    updateUserData,\r\n    isLoaded,\r\n    projectData,\r\n    addOneProject,\r\n    updateProjectData,\r\n  } = useProjectData();\r\n\r\n  const [filteredContents, setFilteredContents] = useState(undefined);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    // Get project data from Context\r\n    //const { projectData } = useProjectData();\r\n\r\n    const inputText = e.target.value;\r\n    setQuery(e.target.value);\r\n\r\n    console.log(\"handleInputChange::ProjectData\", projectData);\r\n    const filteredData = projectData.filter((content) => {\r\n      // destructure data from post frontmatter\r\n      const { shortId, name, description } = content;\r\n      return (\r\n        // standardize data with .toLowerCase()\r\n        // return true if the subject, skills...\r\n        // contains the query string\r\n        name.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        description.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        (inputText.length > 0 && parseInt(inputText) === shortId)\r\n      );\r\n    });\r\n\r\n    if (filteredData && filteredData.length > 0)\r\n      setFilteredContents(filteredData);\r\n    else setFilteredContents(undefined);\r\n  };\r\n\r\n  const onProjectAdd = async () => {\r\n    console.log(\"add and\", projectGroupData._id);\r\n    await addOneProject();\r\n    const newListOfProjects = await updateProjectData(projectGroupData._id);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // get data from APIs\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      // Deal with project group data\r\n      const group = await updateProjectGroupData();\r\n      // Deal with user role data {role:..., isAdmin:...}\r\n      const user = await updateUserData();\r\n      // Deal with project data\r\n      const temp = await updateProjectData(group._id);\r\n    } catch (error) {\r\n      console.error(\"getData:error\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isLoaded && <Spinner />}\r\n      {projectGroupData === undefined ? (\r\n        \"\"\r\n      ) : (\r\n        // deal with project view\r\n        <div className=\"pl-3 pt-3 pb-3 pr-3\">\r\n          <h3 className=\"\">Projets des groupes de {projectGroupData._id}</h3>\r\n          <div className=\"index\">\r\n            <input\r\n              type=\"text\"\r\n              aria-label=\"Search\"\r\n              placeholder=\"Filtrez les contenus...\"\r\n              onChange={handleInputChange}\r\n              className=\"index__search\"\r\n            />\r\n            {filteredContents && filteredContents.length > 0 ? (\r\n              <ProjectsView\r\n                projects={filteredContents}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            ) : (\r\n              <ProjectsView\r\n                projects={projectData}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            )}\r\n          </div>\r\n\r\n          {/* // deal with add a project button */}\r\n          {userData === undefined || !userData.isAdmin ? (\r\n            \"\"\r\n          ) : (\r\n            <button className=\"index__button\" onClick={onProjectAdd}>\r\n              Ajouter projet\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ProjectManagement;\r\n","import React from \"react\";\r\nimport MainLayout from \"../components/main-layout\";\r\n/*\r\nimport callAPI from \"../utils/api/fetch\";\r\nimport Section from \"../components/section\";\r\nimport Content from \"../components/content\";*/\r\n//import ProjectView from \"../components/projects/projects-view\";\r\n//import Spinner from \"../components/spinner/spinner\";\r\nimport { withAuthentication } from \"../components/hoc/hoc\";\r\nimport { ProjectDataProvider } from \"../components/context/projects/project-data-context\";\r\n//import { getIdToken } from \"../utils/auths/authPopup\";\r\nimport {\r\n  useProjectGroupData,\r\n  useUserData,\r\n  useProjectData,\r\n} from \"../components/context/projects/project-data-context\";\r\n\r\nimport ProjectManagement from \"../components/projects/project-management\";\r\n\r\nconst ProjectPage = () => {\r\n  return (\r\n    <ProjectDataProvider>\r\n      <MainLayout>\r\n        <ProjectManagement />\r\n      </MainLayout>\r\n    </ProjectDataProvider>\r\n  );\r\n};\r\n\r\n// const ProjectPage = () => {\r\n\r\n//   const [projectGroup, setProjectGroup] = useState(undefined);\r\n//   const [userRole, setUserRole] = useState(undefined);\r\n//   const [projectsData, setProjectsData] = useState(undefined);\r\n//   const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n//   // Get state from the provider\r\n//   const { projectGroupData, updateProjectGroupData } = useProjectGroupData();\r\n//   const { userData, updateUserData } = useUserData();\r\n//   const { isLoaded, projectData, addOneProject, updateProjectData} = useProjectData();\r\n\r\n//   const [filteredContents, setFilteredContents] = useState(undefined);\r\n//   const [query, setQuery] = useState(\"\");\r\n\r\n//   const handleInputChange = (e) => {\r\n//     // Get project data from Context\r\n//     //const { projectData } = useProjectData();\r\n//     const inputText = e.target.value;\r\n//     setQuery(e.target.value);\r\n\r\n//     const filteredData = projectData.filter((content) => {\r\n//       // destructure data from post frontmatter\r\n//       const { shortId, name, description } = content;\r\n//       return (\r\n//         // standardize data with .toLowerCase()\r\n//         // return true if the subject, skills...\r\n//         // contains the query string\r\n//         name.toLowerCase().includes(inputText.toLowerCase()) ||\r\n//         description.toLowerCase().includes(inputText.toLowerCase()) ||\r\n//         (inputText.length > 0 && parseInt(inputText) === shortId)\r\n//       );\r\n//     });\r\n\r\n//     if (filteredData && filteredData.length > 0)\r\n//       setFilteredContents(filteredData);\r\n//   };\r\n\r\n//   /*\r\n//   // Deal with project data\r\n//   const updateProjectsData = async (projectGroupName) => {\r\n//     setIsLoaded(false);\r\n//     let tempProject = await callAPI(\r\n//       \"projects/projectgroups/\" + projectGroupName,\r\n//       \"get\",\r\n//       getIdToken(),\r\n//       undefined\r\n//     );\r\n//     setProjectsData(tempProject);\r\n//     setFilteredContents(tempProject);\r\n//     setIsLoaded(true);\r\n//   };*/\r\n\r\n//   const onProjectAdd = async () => {\r\n//     //const { addOneProject } = useProjectData();\r\n\r\n//     addOneProject();\r\n//     /*const newProject = await callAPI(\r\n//       \"projects\",\r\n//       \"post\",\r\n//       getIdToken(),\r\n//       undefined\r\n//     );\r\n//     // update the project list\r\n//     updateProjectsData(projectGroup._id);*/\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // get data from APIs\r\n//     getData();\r\n//   }, []);\r\n\r\n//   const getData = async () => {\r\n//     try {\r\n//       // Deal with project group data\r\n//       /*let tempProjectGroup = await callAPI(\r\n//         \"projectgroups/default/public\",\r\n//         \"get\"\r\n//       );\r\n//       setProjectGroup(tempProjectGroup);*/\r\n//       //const { updateProjectGroupData } = useProjectGroupData();\r\n//       updateProjectGroupData();\r\n\r\n//       // Deal with user role data {role:..., isAdmin:...}\r\n//       //const { updateUserData } = useUserData();\r\n//       updateUserData();\r\n//       /*const tempUserRole = await callAPI(\r\n//         \"users/role\",\r\n//         \"get\",\r\n//         getIdToken(),\r\n//         undefined\r\n//       );\r\n//       setUserRole(tempUserRole);*/\r\n\r\n//       // Deal with project data\r\n//       //const { updateProjectData } = useProjectData();\r\n//       updateProjectData();\r\n//       //updateProjectsData(tempProjectGroup._id);\r\n//     } catch (error) {\r\n//       console.error(\"getData:error\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <MainLayout>\r\n//       {/* <Section className=\"pb-3\"> */}\r\n//       {projectGroupData === undefined ? (\r\n//         \"\"\r\n//       ) : (\r\n//         // deal with project view\r\n//         // <Content>\r\n//         <div className=\"pl-3 pt-3 pb-3 pr-3\">\r\n//           <h3 className=\"\">Projets des groupes de {projectGroupData._id}</h3>\r\n//           <div className=\"index\">\r\n//             <input\r\n//               type=\"text\"\r\n//               aria-label=\"Search\"\r\n//               placeholder=\"Filtrez les contenus...\"\r\n//               onChange={handleInputChange}\r\n//               className=\"index__search\"\r\n//             />\r\n//             <ProjectView projects={filteredContents}></ProjectView>\r\n//           </div>\r\n\r\n//           {/* // deal with add a project button */}\r\n//           {userData === undefined || !userData.isAdmin ? (\r\n//             \"\"\r\n//           ) : (\r\n//             <button className=\"index__button\" onClick={onProjectAdd}>\r\n//               Ajouter projet\r\n//             </button>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//       {!isLoaded && <Spinner />}\r\n//       {/* </Section> */}\r\n//     </MainLayout>\r\n//   );\r\n// };\r\n\r\nconst ProjectPageProtected = withAuthentication(ProjectPage);\r\nexport default ProjectPageProtected;\r\n"],"sourceRoot":""}