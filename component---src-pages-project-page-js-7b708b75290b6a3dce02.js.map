{"version":3,"sources":["webpack://myjscourse/./src/components/projects/project-card.js","webpack://myjscourse/./src/utils/string/string.js","webpack://myjscourse/./src/components/projects/projects-view.js","webpack://myjscourse/./src/components/spinner/spinner.js","webpack://myjscourse/./src/components/projects/project-management.js","webpack://myjscourse/./src/pages/project-page.js"],"names":["project","setFilteredContents","useProjectData","deleteOneProject","updateProjectData","addMemberToProject","deleteMemberFromProject","onProjectDelete","projectGroupName","undefined","onAddMemberToProject","onDeleteMemberFromProject","className","key","shortId","id","name","icon","faTrashAlt","onClick","faEdit","faUserPlus","faUserTimes","description","he","presentationUrl","src","frontendProductionUrl","href","target","frontendRepo","backendRepo","projectMembers","length","map","member","names","email","substring","indexOf","firstname","lastname","charAt","toUpperCase","slice","join","projects","faSpinner","projectGroupData","updateProjectGroupData","userData","updateUserData","isLoaded","projectData","addOneProject","useState","filteredContents","setQuery","onProjectAdd","_id","useEffect","getData","group","console","error","type","aria-label","placeholder","onChange","e","inputText","value","filteredData","filter","content","toLowerCase","includes","parseInt","isAdmin","withAuthentication"],"mappings":"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","file":"component---src-pages-project-page-js-7b708b75290b6a3dce02.js","sourcesContent":["import React from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport he from \"he\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEdit,\r\n  faTrashAlt,\r\n  faUserPlus,\r\n  faUserTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getNamesFromEmail } from \"../../utils/string/string\";\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\n\r\nconst ProjectCard = ({ project, setFilteredContents }) => {\r\n  // Get state management functions from the provider\r\n  const {\r\n    deleteOneProject,\r\n    updateProjectData,\r\n    addMemberToProject,\r\n    deleteMemberFromProject,\r\n  } = useProjectData();\r\n  // Deal with events\r\n  const onProjectDelete = async () => {\r\n    //console.log(\"projectId: endpoint:\", \"DELETE /api/projects/\" + projectId);\r\n    await deleteOneProject(project);\r\n    await updateProjectData(project.projectGroupName);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  const onAddMemberToProject = async () => {\r\n    const updatedProject = await addMemberToProject(project);\r\n    console.log(\"onAddMemberToProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onDeleteMemberFromProject = async () => {\r\n    const updatedProject = await deleteMemberFromProject(project);\r\n    console.log(\"onDeleteMemberFromProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  if (!project) return null;\r\n\r\n  return (\r\n    <div className=\"index__card\" key={project.shortId} id={project.shortId}>\r\n      <div className=\"index__card__header\">\r\n        {\"Projet N° \" + project.shortId + \" : \" + project.name}\r\n      </div>\r\n\r\n      <div className=\"index__card__description\">\r\n        <FontAwesomeIcon icon={faTrashAlt} onClick={onProjectDelete} />\r\n        <FontAwesomeIcon icon={faEdit} />\r\n        <FontAwesomeIcon icon={faUserPlus} onClick={onAddMemberToProject} />\r\n        <FontAwesomeIcon\r\n          icon={faUserTimes}\r\n          onClick={onDeleteMemberFromProject}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.description !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Description</div>\r\n            <div className=\"index__card__content__description\">\r\n              {he.decode(project.description)}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.presentationUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">\r\n              Vidéo de présentation\r\n            </div>\r\n            <div className=\"index__card__content__description\">\r\n              <YoutubeImage src={project.presentationUrl} />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendProductionUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">URL du site</div>\r\n            <div className=\"index__card__content__description\">\r\n              <a href={project.frontendProductionUrl} target=\"_blank\">\r\n                {project.frontendProductionUrl}\r\n              </a>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo frontend</div>\r\n            <div className=\"index__card__content__description\">\r\n              <a href={project.frontendRepo} target=\"_blank\">\r\n                {project.frontendRepo}\r\n              </a>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.backendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo backend</div>\r\n            <div className=\"index__card__content__description\">\r\n              <a href={project.backendRepo} target=\"_blank\">\r\n                {project.backendRepo}\r\n              </a>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n      {/* Deal with project members */}\r\n      <div className=\"index__card__content\">\r\n        {project.projectMembers !== undefined &&\r\n        project.projectMembers.length > 0 ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Membres du projet</div>\r\n            <div className=\"index__card__content__description\">\r\n              {project.projectMembers\r\n                .map((member) => getNamesFromEmail(member))\r\n                .join(\", \")}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","const getNamesFromEmail = (email) => {\r\n  let names = email.substring(0, email.indexOf(\"@\"));\r\n  let firstname = names.substring(0, names.indexOf(\".\"));\r\n  let lastname = names.substring(names.indexOf(\".\") + 1);\r\n  firstname = firstname.charAt(0).toUpperCase() + firstname.slice(1);\r\n  lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  // deal with cases where Extra info is added to the name, when there is a second dot\r\n  if (lastname.indexOf(\".\") >= 0) {\r\n    lastname = lastname.substring(lastname.indexOf(\".\") + 1);\r\n    lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  }\r\n  return firstname + \" \" + lastname;\r\n};\r\n\r\nexport { getNamesFromEmail };\r\n","import React from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport ProjectCard from \"./project-card.js\";\r\nimport he from \"he\";\r\n\r\nconst ProjectsView = ({ projects , setFilteredContents}) => {\r\n  console.log(\"PROJECTSVIEW\", projects);\r\n  if (!projects || projects.length <= 0) return null;\r\n\r\n  return (\r\n    <>\r\n      {projects.map((project) => (\r\n        <ProjectCard {...{ project, setFilteredContents }} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectsView;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { fas, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"spinner__overlay\"></div>\r\n      <div className=\"spinner__animation\">\r\n        <FontAwesomeIcon icon={faSpinner} className=\"fa-3x fa-spin\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ProjectsView from \"./projects-view\";\r\nimport Spinner from \"../spinner/spinner\";\r\n\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\n\r\nconst ProjectManagement = () => {\r\n  // Get state from the provider\r\n  const {\r\n    projectGroupData,\r\n    updateProjectGroupData,\r\n    userData,\r\n    updateUserData,\r\n    isLoaded,\r\n    projectData,\r\n    addOneProject,\r\n    updateProjectData,\r\n  } = useProjectData();\r\n\r\n  const [filteredContents, setFilteredContents] = useState(undefined);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    // Get project data from Context\r\n    //const { projectData } = useProjectData();\r\n\r\n    const inputText = e.target.value;\r\n    setQuery(e.target.value);\r\n\r\n    console.log(\"handleInputChange::ProjectData\", projectData);\r\n    const filteredData = projectData.filter((content) => {\r\n      // destructure data from post frontmatter\r\n      const { shortId, name, description } = content;\r\n      return (\r\n        // standardize data with .toLowerCase()\r\n        // return true if the subject, skills...\r\n        // contains the query string\r\n        name.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        description.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        (inputText.length > 0 && parseInt(inputText) === shortId)\r\n      );\r\n    });\r\n\r\n    if (filteredData && filteredData.length > 0)\r\n      setFilteredContents(filteredData);\r\n    else setFilteredContents(undefined);\r\n  };\r\n\r\n  const onProjectAdd = async () => {\r\n    console.log(\"add and\", projectGroupData._id);\r\n    await addOneProject();\r\n    const newListOfProjects = await updateProjectData(projectGroupData._id);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // get data from APIs\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      // Deal with project group data\r\n      const group = await updateProjectGroupData();\r\n      console.log(\"group\", group);\r\n      console.log(\"state\", projectGroupData);\r\n\r\n      // Deal with user role data {role:..., isAdmin:...}\r\n      const user = await updateUserData();\r\n      console.log(\"user\", user);\r\n      console.log(\"state\", userData);\r\n\r\n      // Deal with project data\r\n      //const { updateProjectData } = useProjectData();\r\n      const temp = await updateProjectData(group._id);\r\n      console.log(\"temp\", temp);\r\n      console.log(\"state, not temp:\", projectData);\r\n      //setFilteredContents(temp);\r\n      //updateProjectsData(tempProjectGroup._id);\r\n    } catch (error) {\r\n      console.error(\"getData:error\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {projectGroupData === undefined ? (\r\n        \"\"\r\n      ) : (\r\n        // deal with project view\r\n        // <Content>\r\n        <div className=\"pl-3 pt-3 pb-3 pr-3\">\r\n          <h3 className=\"\">Projets des groupes de {projectGroupData._id}</h3>\r\n          <div className=\"index\">\r\n            <input\r\n              type=\"text\"\r\n              aria-label=\"Search\"\r\n              placeholder=\"Filtrez les contenus...\"\r\n              onChange={handleInputChange}\r\n              className=\"index__search\"\r\n            />\r\n            {filteredContents && filteredContents.length > 0 ? (\r\n              <ProjectsView\r\n                projects={filteredContents}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            ) : (\r\n              <ProjectsView\r\n                projects={projectData}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            )}\r\n          </div>\r\n\r\n          {/* // deal with add a project button */}\r\n          {userData === undefined || !userData.isAdmin ? (\r\n            \"\"\r\n          ) : (\r\n            <button className=\"index__button\" onClick={onProjectAdd}>\r\n              Ajouter projet\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n      {!isLoaded && <Spinner />}\r\n    </>\r\n  );\r\n};\r\nexport default ProjectManagement;\r\n","import React from \"react\";\r\nimport MainLayout from \"../components/main-layout\";\r\n/*\r\nimport callAPI from \"../utils/api/fetch\";\r\nimport Section from \"../components/section\";\r\nimport Content from \"../components/content\";*/\r\n//import ProjectView from \"../components/projects/projects-view\";\r\n//import Spinner from \"../components/spinner/spinner\";\r\nimport { withAuthentication } from \"../components/hoc/hoc\";\r\nimport { ProjectDataProvider } from \"../components/context/projects/project-data-context\";\r\n//import { getIdToken } from \"../utils/auths/authPopup\";\r\nimport {\r\n  useProjectGroupData,\r\n  useUserData,\r\n  useProjectData,\r\n} from \"../components/context/projects/project-data-context\";\r\n\r\nimport ProjectManagement from \"../components/projects/project-management\";\r\n\r\nconst ProjectPage = () => {\r\n  return (\r\n    <ProjectDataProvider>\r\n      <MainLayout>\r\n        <ProjectManagement />\r\n      </MainLayout>\r\n    </ProjectDataProvider>\r\n  );\r\n};\r\n\r\n// const ProjectPage = () => {\r\n\r\n//   const [projectGroup, setProjectGroup] = useState(undefined);\r\n//   const [userRole, setUserRole] = useState(undefined);\r\n//   const [projectsData, setProjectsData] = useState(undefined);\r\n//   const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n//   // Get state from the provider\r\n//   const { projectGroupData, updateProjectGroupData } = useProjectGroupData();\r\n//   const { userData, updateUserData } = useUserData();\r\n//   const { isLoaded, projectData, addOneProject, updateProjectData} = useProjectData();\r\n\r\n//   const [filteredContents, setFilteredContents] = useState(undefined);\r\n//   const [query, setQuery] = useState(\"\");\r\n\r\n//   const handleInputChange = (e) => {\r\n//     // Get project data from Context\r\n//     //const { projectData } = useProjectData();\r\n//     const inputText = e.target.value;\r\n//     setQuery(e.target.value);\r\n\r\n//     const filteredData = projectData.filter((content) => {\r\n//       // destructure data from post frontmatter\r\n//       const { shortId, name, description } = content;\r\n//       return (\r\n//         // standardize data with .toLowerCase()\r\n//         // return true if the subject, skills...\r\n//         // contains the query string\r\n//         name.toLowerCase().includes(inputText.toLowerCase()) ||\r\n//         description.toLowerCase().includes(inputText.toLowerCase()) ||\r\n//         (inputText.length > 0 && parseInt(inputText) === shortId)\r\n//       );\r\n//     });\r\n\r\n//     if (filteredData && filteredData.length > 0)\r\n//       setFilteredContents(filteredData);\r\n//   };\r\n\r\n//   /*\r\n//   // Deal with project data\r\n//   const updateProjectsData = async (projectGroupName) => {\r\n//     setIsLoaded(false);\r\n//     let tempProject = await callAPI(\r\n//       \"projects/projectgroups/\" + projectGroupName,\r\n//       \"get\",\r\n//       getIdToken(),\r\n//       undefined\r\n//     );\r\n//     setProjectsData(tempProject);\r\n//     setFilteredContents(tempProject);\r\n//     setIsLoaded(true);\r\n//   };*/\r\n\r\n//   const onProjectAdd = async () => {\r\n//     //const { addOneProject } = useProjectData();\r\n\r\n//     addOneProject();\r\n//     /*const newProject = await callAPI(\r\n//       \"projects\",\r\n//       \"post\",\r\n//       getIdToken(),\r\n//       undefined\r\n//     );\r\n//     // update the project list\r\n//     updateProjectsData(projectGroup._id);*/\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // get data from APIs\r\n//     getData();\r\n//   }, []);\r\n\r\n//   const getData = async () => {\r\n//     try {\r\n//       // Deal with project group data\r\n//       /*let tempProjectGroup = await callAPI(\r\n//         \"projectgroups/default/public\",\r\n//         \"get\"\r\n//       );\r\n//       setProjectGroup(tempProjectGroup);*/\r\n//       //const { updateProjectGroupData } = useProjectGroupData();\r\n//       updateProjectGroupData();\r\n\r\n//       // Deal with user role data {role:..., isAdmin:...}\r\n//       //const { updateUserData } = useUserData();\r\n//       updateUserData();\r\n//       /*const tempUserRole = await callAPI(\r\n//         \"users/role\",\r\n//         \"get\",\r\n//         getIdToken(),\r\n//         undefined\r\n//       );\r\n//       setUserRole(tempUserRole);*/\r\n\r\n//       // Deal with project data\r\n//       //const { updateProjectData } = useProjectData();\r\n//       updateProjectData();\r\n//       //updateProjectsData(tempProjectGroup._id);\r\n//     } catch (error) {\r\n//       console.error(\"getData:error\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <MainLayout>\r\n//       {/* <Section className=\"pb-3\"> */}\r\n//       {projectGroupData === undefined ? (\r\n//         \"\"\r\n//       ) : (\r\n//         // deal with project view\r\n//         // <Content>\r\n//         <div className=\"pl-3 pt-3 pb-3 pr-3\">\r\n//           <h3 className=\"\">Projets des groupes de {projectGroupData._id}</h3>\r\n//           <div className=\"index\">\r\n//             <input\r\n//               type=\"text\"\r\n//               aria-label=\"Search\"\r\n//               placeholder=\"Filtrez les contenus...\"\r\n//               onChange={handleInputChange}\r\n//               className=\"index__search\"\r\n//             />\r\n//             <ProjectView projects={filteredContents}></ProjectView>\r\n//           </div>\r\n\r\n//           {/* // deal with add a project button */}\r\n//           {userData === undefined || !userData.isAdmin ? (\r\n//             \"\"\r\n//           ) : (\r\n//             <button className=\"index__button\" onClick={onProjectAdd}>\r\n//               Ajouter projet\r\n//             </button>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//       {!isLoaded && <Spinner />}\r\n//       {/* </Section> */}\r\n//     </MainLayout>\r\n//   );\r\n// };\r\n\r\nconst ProjectPageProtected = withAuthentication(ProjectPage);\r\nexport default ProjectPageProtected;\r\n"],"sourceRoot":""}