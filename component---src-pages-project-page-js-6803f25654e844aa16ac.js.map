{"version":3,"sources":["webpack://myjscourse/./src/components/content-editable/content-editable.js","webpack://myjscourse/./src/components/spinner/spinner.js","webpack://myjscourse/./src/components/projects/project-card.js","webpack://myjscourse/./src/components/projects/projects-view.js","webpack://myjscourse/./src/components/projects/project-management.js","webpack://myjscourse/./src/pages/project-page.js","webpack://myjscourse/./src/utils/string/string.js"],"names":["currentContent","allClasses","className","isBeingEdited","onChange","startContent","id","isInline","children","useState","content","he","contentEditable","onInput","e","propUpdated","currentTarget","textContent","suppressContentEditableWarning","icon","faSpinner","project","setFilteredContents","setIsBeingEdited","isPublic","setIsPublic","projectUpdateState","setProjectUpdateState","useProjectData","deleteOneProject","updateProjectData","addMemberToProject","deleteMemberFromProject","updateProject","userData","projectGroupData","projectData","onProjectDelete","projectGroupName","undefined","onAddMemberToProject","onDeleteMemberFromProject","onProjectSave","_id","updatedProject","handleChange","propChanged","previousState","key","shortId","name","isAdmin","faTrashAlt","onClick","projectMembers","includes","userName","status","faEdit","find","length","maximumProjectMembers","faUserPlus","faUserTimes","faSave","faTimes","description","presentationUrl","src","frontendProductionUrl","href","target","frontendRepo","backendRepo","map","member","getNamesFromEmail","join","type","checked","disabled","projects","updateProjectGroupData","updateUserData","isLoaded","addOneProject","filteredContents","setQuery","onProjectAdd","useEffect","getData","group","console","error","aria-label","placeholder","inputText","value","filteredData","filter","toLowerCase","parseInt","withAuthentication","email","names","substring","indexOf","firstname","lastname","charAt","toUpperCase","slice"],"mappings":"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","file":"component---src-pages-project-page-js-6803f25654e844aa16ac.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport he from \"he\";\r\n\r\n/**\r\n * Make a div editable with text (could also be some HTML if needed).\r\n * @param {startContent} String to be used when the content is being updated\r\n * @param {children} React elements to be used when the content is not being updated\r\n * @returns\r\n */\r\n\r\nconst ContentEditable = ({\r\n  className,\r\n  isBeingEdited,\r\n  onChange,\r\n  startContent,\r\n  id,\r\n  isInline,\r\n  children,\r\n}) => {\r\n  const [content, setContent] = useState(startContent);\r\n\r\n  const handleChange = (e) => {\r\n    const propUpdated = {};\r\n    propUpdated[id] = e.currentTarget.textContent;\r\n    // set state at parent level\r\n    onChange(propUpdated);\r\n  };\r\n\r\n  let currentContent;\r\n  if (isBeingEdited) currentContent = content;\r\n  else if (children) currentContent = children;\r\n  else if (content) currentContent = he.decode(content);\r\n\r\n  let allClasses;\r\n  allClasses = className ? className : \"\";\r\n  if (isBeingEdited)\r\n    allClasses += \" index__card__content__description--is-being-edited\";\r\n  if (isInline) allClasses += \" index__card__content__description--is-inline\";\r\n\r\n  return (\r\n    <div\r\n      className={allClasses}\r\n      contentEditable={isBeingEdited ? true : false}\r\n      onInput={handleChange}\r\n      suppressContentEditableWarning={true}\r\n    >\r\n      {currentContent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContentEditable;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { fas, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"spinner__overlay\"></div>\r\n      <div className=\"spinner__animation\">\r\n        <FontAwesomeIcon icon={faSpinner} className=\"fa-3x fa-spin\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport he from \"he\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEdit,\r\n  faTrashAlt,\r\n  faUserPlus,\r\n  faUserTimes,\r\n  faSave,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getNamesFromEmail } from \"../../utils/string/string\";\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\nimport ContentEditable from \"../content-editable/content-editable.js\";\r\n\r\nconst ProjectCard = ({ project, setFilteredContents }) => {\r\n  const [isBeingEdited, setIsBeingEdited] = useState(false);\r\n  const [isPublic, setIsPublic] = useState(project.isPublic);\r\n  const [projectUpdateState, setProjectUpdateState] = useState({});\r\n  // Get state management functions from the provider\r\n  const {\r\n    deleteOneProject,\r\n    updateProjectData,\r\n    addMemberToProject,\r\n    deleteMemberFromProject,\r\n    updateProject,\r\n    userData,\r\n    projectGroupData,\r\n    projectData,\r\n  } = useProjectData();\r\n  // Deal with events\r\n  const onProjectDelete = async () => {\r\n    //console.log(\"projectId: endpoint:\", \"DELETE /api/projects/\" + projectId);\r\n    await deleteOneProject(project);\r\n    await updateProjectData(project.projectGroupName);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  const onAddMemberToProject = async () => {\r\n    const updatedProject = await addMemberToProject(project);\r\n    console.log(\"onAddMemberToProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onDeleteMemberFromProject = async () => {\r\n    const updatedProject = await deleteMemberFromProject(project);\r\n    console.log(\"onDeleteMemberFromProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onProjectUpdateRequest = () => {\r\n    setIsBeingEdited(true);\r\n  };\r\n\r\n  const onQuitProjectUpdateRequest = () => {\r\n    setIsBeingEdited(false);\r\n    // clear the update state\r\n    setProjectUpdateState({});\r\n  };\r\n\r\n  const onProjectSave = async () => {\r\n    // save the updated state via the API\r\n    if (projectUpdateState) {\r\n      const updatedProject = await updateProject(\r\n        projectUpdateState,\r\n        project._id\r\n      );\r\n      // clear the project update state\r\n      setProjectUpdateState({});\r\n      setIsBeingEdited(false);\r\n      // re-render all projects\r\n      if (updatedProject) {\r\n        await updateProjectData(project.projectGroupName);\r\n        setFilteredContents(undefined);\r\n      }\r\n    }\r\n  };\r\n\r\n  // deal with modification of content\r\n  const handleChange = (propChanged) => {\r\n    // update the projectState\r\n    setProjectUpdateState((previousState) => {\r\n      return { ...previousState, ...propChanged };\r\n    });\r\n  };\r\n\r\n  const onSetPublic = (e) => {\r\n    setIsPublic(!isPublic);\r\n    setProjectUpdateState({\r\n      ...projectUpdateState,\r\n      ...{ isPublic: !isPublic },\r\n    });\r\n  };\r\n\r\n  console.log(\"projStateUpdated:\", projectUpdateState);\r\n\r\n  if (!project) return null;\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"index__card\" + (isBeingEdited ? \" index__card--is-being-edited\" : \"\")\r\n      }\r\n      key={project.shortId}\r\n      id={project.shortId}\r\n    >\r\n      <div className=\"index__card__header\">\r\n        <span>{\"Projet N° \" + project.shortId + \" : \"}</span>\r\n        <ContentEditable\r\n          isBeingEdited={isBeingEdited}\r\n          id=\"name\"\r\n          onChange={handleChange}\r\n          startContent={project.name}\r\n          isInline\r\n        />\r\n      </div>\r\n\r\n      <div className=\"index__card__description\">\r\n        {\r\n          /* DELETE icon only if user isAdmin (admin or manager) */\r\n          userData.isAdmin && (\r\n            <FontAwesomeIcon icon={faTrashAlt} onClick={onProjectDelete} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /* UPDATE PROJECT : visible only if \r\n          (user is Admin (admin or manager) OR\r\n          user is a member of this project AND \r\n          project group status is not \"end\" ) AND\r\n          project is not being edited\r\n          */\r\n          (userData.isAdmin ||\r\n            (project.projectMembers.includes(userData.userName) &&\r\n              projectGroupData.status !== \"end\")) &&\r\n          !isBeingEdited ? (\r\n            <FontAwesomeIcon icon={faEdit} onClick={onProjectUpdateRequest} />\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n\r\n        {\r\n          /* ADD MEMBER TO PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName has not already joined a project AND\r\n        number of members is < maximum number */\r\n          projectGroupData.status === \"init\" &&\r\n            !projectData.find((project) =>\r\n              project.projectMembers.includes(userData.userName)\r\n            ) &&\r\n            project.projectMembers.length <\r\n              projectGroupData.maximumProjectMembers(\r\n                <FontAwesomeIcon\r\n                  icon={faUserPlus}\r\n                  onClick={onAddMemberToProject}\r\n                />\r\n              )\r\n        }\r\n        {\r\n          /*REMOVE MEMBER FROM PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName is already a member of this project\r\n        */\r\n          projectGroupData.status === \"init\" &&\r\n            project.projectMembers.includes(userData.userName) && (\r\n              <FontAwesomeIcon\r\n                icon={faUserTimes}\r\n                onClick={onDeleteMemberFromProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*SAVE PROJECT : Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon icon={faSave} onClick={onProjectSave} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /*QUIT PROJECT UPDATE: Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon\r\n              icon={faTimes}\r\n              onClick={onQuitProjectUpdateRequest}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.description !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Description</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"description\"\r\n              startContent={project.description}\r\n              onChange={handleChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.presentationUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">\r\n              Vidéo de présentation\r\n            </div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"presentationUrl\"\r\n              startContent={project.presentationUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <YoutubeImage src={project.presentationUrl} />\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendProductionUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">URL du site</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendProductionUrl\"\r\n              startContent={project.frontendProductionUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendProductionUrl} target=\"_blank\">\r\n                {project.frontendProductionUrl}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo frontend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendRepo\"\r\n              startContent={project.frontendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendRepo} target=\"_blank\">\r\n                {project.frontendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.backendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo backend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"backendRepo\"\r\n              startContent={project.backendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.backendRepo} target=\"_blank\">\r\n                {project.backendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deal with project members */}\r\n      <div className=\"index__card__content\">\r\n        {project.projectMembers !== undefined &&\r\n        project.projectMembers.length > 0 ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Membres du projet</div>\r\n            <div className=\"index__card__content__description\">\r\n              {project.projectMembers\r\n                .map((member) => getNamesFromEmail(member))\r\n                .join(\", \")}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.isPublic !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Public ?</div>\r\n            <div className=\"index__card__content__description\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={isPublic}\r\n                disabled={isBeingEdited ? false : true}\r\n                onClick={onSetPublic}\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport ProjectCard from \"./project-card.js\";\r\nimport he from \"he\";\r\n\r\nconst ProjectsView = ({ projects , setFilteredContents}) => {\r\n  console.log(\"PROJECTSVIEW\", projects);\r\n  if (!projects || projects.length <= 0) return null;\r\n\r\n  return (\r\n    <>\r\n      {projects.map((project) => (\r\n        <ProjectCard {...{ project, setFilteredContents }} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectsView;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ProjectsView from \"./projects-view\";\r\nimport Spinner from \"../spinner/spinner\";\r\n\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\n\r\nconst ProjectManagement = () => {\r\n  // Get state from the provider\r\n  const {\r\n    projectGroupData,\r\n    updateProjectGroupData,\r\n    userData,\r\n    updateUserData,\r\n    isLoaded,\r\n    projectData,\r\n    addOneProject,\r\n    updateProjectData,\r\n  } = useProjectData();\r\n\r\n  const [filteredContents, setFilteredContents] = useState(undefined);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    // Get project data from Context\r\n    //const { projectData } = useProjectData();\r\n\r\n    const inputText = e.target.value;\r\n    setQuery(e.target.value);\r\n\r\n    console.log(\"handleInputChange::ProjectData\", projectData);\r\n    const filteredData = projectData.filter((content) => {\r\n      // destructure data from post frontmatter\r\n      const { shortId, name, description } = content;\r\n      return (\r\n        // standardize data with .toLowerCase()\r\n        // return true if the subject, skills...\r\n        // contains the query string\r\n        name.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        description.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        (inputText.length > 0 && parseInt(inputText) === shortId)\r\n      );\r\n    });\r\n\r\n    if (filteredData && filteredData.length > 0)\r\n      setFilteredContents(filteredData);\r\n    else setFilteredContents(undefined);\r\n  };\r\n\r\n  const onProjectAdd = async () => {\r\n    console.log(\"add and\", projectGroupData._id);\r\n    await addOneProject();\r\n    const newListOfProjects = await updateProjectData(projectGroupData._id);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // get data from APIs\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      // Deal with project group data\r\n      const group = await updateProjectGroupData();\r\n      // Deal with user role data {role:..., isAdmin:...}\r\n      const user = await updateUserData();\r\n      // Deal with project data\r\n      const temp = await updateProjectData(group._id);\r\n    } catch (error) {\r\n      console.error(\"getData:error\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isLoaded && <Spinner />}\r\n      {projectGroupData === undefined ? (\r\n        \"\"\r\n      ) : (\r\n        // deal with project view\r\n        <div className=\"pl-3 pt-3 pb-3 pr-3\">\r\n          <h3 className=\"\">Projets des groupes de {projectGroupData._id}</h3>\r\n          <div className=\"index\">\r\n            <input\r\n              type=\"text\"\r\n              aria-label=\"Search\"\r\n              placeholder=\"Filtrez les contenus...\"\r\n              onChange={handleInputChange}\r\n              className=\"index__search\"\r\n            />\r\n            {filteredContents && filteredContents.length > 0 ? (\r\n              <ProjectsView\r\n                projects={filteredContents}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            ) : (\r\n              <ProjectsView\r\n                projects={projectData}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            )}\r\n          </div>\r\n\r\n          {/* // deal with add a project button */}\r\n          {userData === undefined || !userData.isAdmin ? (\r\n            \"\"\r\n          ) : (\r\n            <button className=\"index__button\" onClick={onProjectAdd}>\r\n              Ajouter projet\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ProjectManagement;\r\n","import React from \"react\";\r\nimport MainLayout from \"../components/main-layout\";\r\n\r\nimport { withAuthentication } from \"../components/hoc/hoc\";\r\nimport { ProjectDataProvider } from \"../components/context/projects/project-data-context\";\r\n\r\nimport ProjectManagement from \"../components/projects/project-management\";\r\n\r\nconst ProjectPage = () => {\r\n  return (\r\n    <ProjectDataProvider>\r\n      <MainLayout>\r\n        <ProjectManagement />\r\n      </MainLayout>\r\n    </ProjectDataProvider>\r\n  );\r\n};\r\n\r\nconst ProjectPageProtected = withAuthentication(ProjectPage);\r\nexport default ProjectPageProtected;\r\n","const getNamesFromEmail = (email) => {\r\n  let names = email.substring(0, email.indexOf(\"@\"));\r\n  let firstname = names.substring(0, names.indexOf(\".\"));\r\n  let lastname = names.substring(names.indexOf(\".\") + 1);\r\n  firstname = firstname.charAt(0).toUpperCase() + firstname.slice(1);\r\n  lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  // deal with cases where Extra info is added to the name, when there is a second dot\r\n  if (lastname.indexOf(\".\") >= 0) {\r\n    lastname = lastname.substring(lastname.indexOf(\".\") + 1);\r\n    lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  }\r\n  return firstname + \" \" + lastname;\r\n};\r\n\r\nexport { getNamesFromEmail };\r\n"],"sourceRoot":""}